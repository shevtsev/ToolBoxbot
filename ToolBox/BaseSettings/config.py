import json, logging
from datetime import datetime
from dotenv import load_dotenv
from os import environ as env
from dateutil.relativedelta import relativedelta
from dataclasses import dataclass

@dataclass
class Config:
    __instance = None

    def __new__(cls):
      if cls.__instance is None:
        load_dotenv()
        logging.basicConfig(filename='out.log', level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        cls.__instance = super(Config, cls).__new__(cls)
        cls.__instance.start_params = lambda text=[0]*12, sessions_messages=[], some=False, images="0", free=False, basic=False, pro=False, ultra=False, incoming_tokens=0, outgoing_tokens=0, free_requests=5, image_requests=0, datetime_sub=datetime.now().replace(microsecond=0)+relativedelta(days=1), promocode="", ref='': {'text':text, "sessions_messages": sessions_messages, "some":some, 'images':images, 'free': free, 'basic': basic, 'pro': pro, 'ultra': ultra, 'incoming_tokens': incoming_tokens, 'outgoing_tokens': outgoing_tokens, 'free_requests': free_requests, 'image_requests': image_requests, 'datetime_sub': datetime_sub, 'promocode': promocode, 'ref': ref}
        cls.__instance.token = env['TOKEN']
        cls.__instance.hf_tokens = [env[f"HF_TOKEN{i}"] for i in range(1, 8)]
        cls.__instance.git_tokens = [env[f'GIT_TOKEN{i}'] for i in range(1, 7)]
        cls.__instance.mistral_token = env['MISTRAL_TOKEN']
        cls.__instance.titles = {
          "id": "TEXT PRIMARY KEY", "text": "INTEGER[]",
          "sessions_messages": "TEXT[]", "some": "BOOLEAN",
          "images": "CHAR", "free": "BOOLEAN", "basic": "BOOLEAN",
          "pro": "BOOLEAN", "incoming_tokens": "INTEGER", "outgoing_tokens": "INTEGER",
          "free_requests": "INTEGER", "datetime_sub": "DATETIME", "promocode": "TEXT",
          "ref": "TEXT", "ultra": "INTEGER", "image_requests": "INTEGER"
        }
        cls.__instance.provider_token = env['PROVIDE_TOKEN']
        cls.__instance.currency = "RUB"
        cls.__instance.price_basic = 99*100
        cls.__instance.price_pro = 199*100
        cls.__instance.price_ultra = 399*100
        
        # Daily limits
        cls.__instance.free_text_limit = 5
        cls.__instance.free_image_limit = 3
        cls.__instance.pro_image_limit = 10
        
        # FLUX models
        cls.__instance.flux_models = {
            "dev": "black-forest-labs/FLUX.1-dev",
            "krea": "black-forest-labs/FLUX.1-Krea-dev",
            "context": "black-forest-labs/FLUX.1-dev",
            "schnell": "black-forest-labs/FLUX.1-schnell"
        }
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
        cls.__instance.tariff_models = {
            "free": ["schnell"],
            "basic": ["schnell", "dev", "krea"],
            "pro": ["schnell", "dev", "krea", "context"],
            "ultra": ["schnell", "dev", "krea", "context"]
        }
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cls.__instance.model_names = {
            "schnell": "Schnell (–±—ã—Å—Ç—Ä–∞—è)",
            "dev": "Dev (–¥–µ—Ç–∞–ª—å–Ω–∞—è)",
            "krea": "Krea (–∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è)",
            "context": "Context (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è)"
        }
        
        # –î–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        provider_data_basic = {
          "receipt": {
            "items": [
              {
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ Basic: –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ —Ç–µ–∫—Å—Ç + 3 Pro-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å",
                "quantity": "1.00",
                "amount": {
                  "value": f"{cls.__instance.price_basic / 100:.2f}",
                  "currency": cls.__instance.currency
                },
                "payment_mode" : "full_payment",
                "vat_code": 1
              }
            ]
          }
        }
        
        provider_data_pro = {
          "receipt": {
            "items": [
              {
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ Pro: –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ —Ç–µ–∫—Å—Ç + 10 Pro-–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å",
                "quantity": "1.00",
                "amount": {
                  "value": f"{cls.__instance.price_pro / 100:.2f}",
                  "currency": cls.__instance.currency
                },
                "payment_mode" : "full_payment",
                "vat_code": 1
              }
            ]
          }
        }
        
        provider_data_ultra = {
          "receipt": {
            "items": [
              {
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ Ultra: –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ —Ç–µ–∫—Å—Ç –∏ Pro-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                "quantity": "1.00",
                "amount": {
                  "value": f"{cls.__instance.price_ultra / 100:.2f}",
                  "currency": cls.__instance.currency
                },
                "payment_mode" : "full_payment",
                "vat_code": 1
              }
            ]
          }
        }
        
        cls.__instance.provider_data_basic = json.dumps(provider_data_basic)
        cls.__instance.provider_data_pro = json.dumps(provider_data_pro)
        cls.__instance.provider_data_ultra = json.dumps(provider_data_ultra)

        with open("BaseSettings/prompts.json", 'r') as file:
            prompts_text = json.load(file)
        cls.__instance.prompts_text = prompts_text
        cls.__instance.delay = "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ . . ."
        cls.__instance.start_name = ["–¢–µ–∫—Å—Ç üìù", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®", "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º üóΩ", "–¢–∞—Ä–∏—Ñ—ã üí∏"]
        cls.__instance.start_data = ["text", "images", "free", "tariff"]
        cls.__instance.choose_task = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∑–∞–¥–∞—á—É"
        cls.__instance.imagesize = "–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≤–≤–æ–¥–∏–º–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ)."
        cls.__instance.next_step = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        cls.__instance.limit_end = "–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —É–≤—ã, –∏—Å—á–µ—Ä–ø–∞–Ωüò¢ –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∏—Ö –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        cls.__instance.text_types_name = ["–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π  üõçÔ∏è", "–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω üìã", "–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üìö", "–°—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞ üíª", "–õ–æ–Ω–≥—Ä–∏–¥ üìë", "SMM üì±",
                "–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º üí°", "–†–µ–∫–ª–∞–º–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã üì∫", "–ó–∞–≥–æ–ª–æ–≤–∫–∏ üîç", "SEO üåê", "–ù–æ–≤–æ—Å—Ç—å üì∞", "–†–µ–¥–∞–∫—Ç—É—Ä–∞ üìù", "–í –º–µ–Ω—é"]
        cls.__instance.text_types_data = ["comm-text", "content-plan", "summarization", "blog", "longrid", "smm-text", "brainst-text", "advertising-text",
                "headlines-text", "seo-text", "news", "editing", "exit"]
        cls.__instance.tarrif_name = ["BASIC", "PRO", "ULTRA", "–ü—Ä–æ–º–æ–∫–æ–¥", "–í –º–µ–Ω—é", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"]
        cls.__instance.tarrif_data = ["basic", "pro", "ultra", "promo", "exit", "ref"]
        cls.__instance.improve_off_name = ["9:16", "1:1", "16:9", "–£–ª—É—á—à–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã", "–ú–æ–¥–µ–ª—å", "–í –º–µ–Ω—é"]
        cls.__instance.improve_off_data = ["576x1024", "1024x1024", "1024x576", "improve_prompts_off", "model_select", "exit"]
        cls.__instance.improve_on_name = ["9:16", "1:1", "16:9", "–£–ª—É—á—à–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã‚úÖ", "–ú–æ–¥–µ–ª—å", "–í –º–µ–Ω—é"]
        cls.__instance.improve_on_data = ["576x1024", "1024x1024", "1024x576", "improve_prompts_on", "model_select", "exit"]

        cls.__instance.admin_ids = ['2004851715', '206635551']
        cls.__instance.promocodes = json.load(open("promocodes/promocodes.json"))
        return cls.__instance
      
config = Config()