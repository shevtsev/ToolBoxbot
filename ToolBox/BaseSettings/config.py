import json, logging
from datetime import datetime
from dotenv import load_dotenv
from os import environ as env
from dateutil.relativedelta import relativedelta
from dataclasses import dataclass

@dataclass
class Config:
    __instance = None

    def __new__(cls):
      if cls.__instance is None:
        load_dotenv()
        logging.basicConfig(filename='out.log', level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        cls.__instance = super(Config, cls).__new__(cls)
        cls.__instance.start_params = lambda text=[0]*12, sessions_messages=[], some=False, images="0", free=False, basic=False, pro=False, incoming_tokens=0, outgoing_tokens=0, free_requests=10, datetime_sub=datetime.now().replace(microsecond=0)+relativedelta(days=1), promocode="", ref='': {'text':text, "sessions_messages": sessions_messages, "some":some, 'images':images, 'free': free, 'basic': basic, 'pro': pro, 'incoming_tokens': incoming_tokens, 'outgoing_tokens': outgoing_tokens, 'free_requests': free_requests, 'datetime_sub': datetime_sub, 'promocode': promocode, 'ref': ref}
        cls.__instance.token = env['TOKEN']
        cls.__instance.hf_tokens = [env[f"HF_TOKEN{i}"] for i in range(1, 7)]
        cls.__instance.git_tokens = [env[f'GIT_TOKEN{i}'] for i in range(1, 7)]
        cls.__instance.mistral_token = env['MISTRAL_TOKEN']
        cls.__instance.titles = {
          "id": "TEXT PRIMARY KEY", "text": "INTEGER[]",
          "sessions_messages": "TEXT[]", "some": "BOOLEAN",
          "images": "CHAR", "free" : "BOOLEAN", "basic" : "BOOLEAN",
          "pro" : "BOOLEAN", "incoming_tokens": "INTEGER", "outgoing_tokens" : "INTEGER",
          "free_requests" : "INTEGER", "datetime_sub": "DATETIME", "promocode": "TEXT", "ref": "TEXT"
        }
        cls.__instance.provider_token = env['PROVIDE_TOKEN']
        cls.__instance.currency = "RUB"
        cls.__instance.price_basic = 60*100
        cls.__instance.price_pro = 100*100
        provider_data_basic = {
          "receipt": {
            "items": [
              {
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ ToolBox –ø–æ —Ç–∞—Ä–∏—Ñ—É Basic",
                "quantity": "1.00",
                "amount": {
                  "value": f"{cls.__instance.price_basic / 100:.2f}",
                  "currency": cls.__instance.currency
                },
                "payment_mode" : "full_payment",
                "vat_code": 1
              }
            ]
          }
        }
        provider_data_pro = {
          "receipt": {
            "items": [
              {
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ ToolBox –ø–æ —Ç–∞—Ä–∏—Ñ—É Pro",
                "quantity": "1.00",
                "amount": {
                  "value": f"{cls.__instance.price_pro / 100:.2f}",
                  "currency": cls.__instance.currency
                },
                "payment_mode" : "full_payment",
                "vat_code": 1
              }
            ]
          }
        }
        cls.__instance.provider_data_basic = json.dumps(provider_data_basic)
        cls.__instance.provider_data_pro = json.dumps(provider_data_pro)

        with open("BaseSettings/prompts.json", 'r') as file:
            prompts_text = json.load(file)
        cls.__instance.prompts_text = prompts_text
        cls.__instance.delay = "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ . . ."
        cls.__instance.start_name = ["–¢–µ–∫—Å—Ç üìù", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®", "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º üóΩ", "–¢–∞—Ä–∏—Ñ—ã üí∏"]
        cls.__instance.start_data = ["text", "images", "free", "tariff"]
        cls.__instance.choose_task = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∑–∞–¥–∞—á—É"
        cls.__instance.imagesize = "–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≤–≤–æ–¥–∏–º–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ)."
        cls.__instance.next_step = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        cls.__instance.limit_end = "–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —É–≤—ã, –∏—Å—á–µ—Ä–ø–∞–Ωüò¢ –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∏—Ö –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        cls.__instance.text_types_name = ["–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π  üõçÔ∏è", "–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω üìã", "–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üìö", "–°—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞ üíª", "–õ–æ–Ω–≥—Ä–∏–¥ üìë", "SMM üì±",
                "–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º üí°", "–†–µ–∫–ª–∞–º–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã üì∫", "–ó–∞–≥–æ–ª–æ–≤–∫–∏ üîç", "SEO üåê", "–ù–æ–≤–æ—Å—Ç—å üì∞", "–†–µ–¥–∞–∫—Ç—É—Ä–∞ üìù", "–í –º–µ–Ω—é"]
        cls.__instance.text_types_data = ["comm-text", "content-plan", "summarization", "blog", "longrid", "smm-text", "brainst-text", "advertising-text",
                "headlines-text", "seo-text", "news", "editing", "exit"]
        cls.__instance.tarrif_name = ["BASIC", "PRO", "–ü—Ä–æ–º–æ–∫–æ–¥", "–í –º–µ–Ω—é", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"]
        cls.__instance.tarrif_data = ["basic", "pro", "promo", "exit", "ref"]
        cls.__instance.improve_off_name = ["9:16", "1:1", "16:9", "–£–ª—É—á—à–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã", "–í –º–µ–Ω—é"]
        cls.__instance.improve_off_data = ["576x1024", "1024x1024", "1024x576", "improve_prompts_off", "exit"]
        cls.__instance.improve_on_name = ["9:16", "1:1", "16:9", "–£–ª—É—á—à–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã‚úÖ", "–í –º–µ–Ω—é"]
        cls.__instance.improve_on_data = ["576x1024", "1024x1024", "1024x576", "improve_prompts_on", "exit"]
        cls.__instance.admin_ids = ['2004851715', '206635551']
        cls.__instance.promocodes = json.load(open("promocodes/promocodes.json"))
        return cls.__instance
      
config = Config()